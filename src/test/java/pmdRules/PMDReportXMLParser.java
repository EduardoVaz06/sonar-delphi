package pmdRules;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.apache.commons.lang.StringUtils;
import org.junit.Test;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * Read in a pmd-report.xml file generated by a SonarQube scan
 */
public class PMDReportXMLParser {

  // Note that these paths are relative
  private static String TEST_PROJECT_DIR = "src/test/resources/pmdRuleTestFiles/delphi-test-project/";
  private static String PMD_REPORT_FILE = ".scannerwork/pmd-report.xml";

  HashMap<String, ArrayList<ArrayList<Object>>> violationsMap = new HashMap<>();


  /**
   * This class parses the pmd report xml file generated by a sonarqube scan. It is then stored in a
   * data structure, a hashmap (file names as keys) pointing to arraylists which store the violated
   * rule type and the line the violation was on.
   */
  public void parsePmdReportXML() {

    try {
      File pmdReport = new File(TEST_PROJECT_DIR + PMD_REPORT_FILE);
      DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
      DocumentBuilder docBuilder = dbFactory.newDocumentBuilder();
      Document pmdReportDoc = docBuilder.parse(pmdReport);
      pmdReportDoc.getDocumentElement().normalize();

      NodeList fileNodes = pmdReportDoc.getElementsByTagName("file");

      buildXMLHashmap(fileNodes);


    } catch (Exception e) {
      System.out.print("Error parsing PMD report.\n");
      e.printStackTrace();
    }

  }

  /**
   * Build the Hashmap of lists by iterating through all the 'file' tags and the child 'violation'
   * nodes.
   *
   * Note: It could be better to have this as a hashmap pointing to another hashmap of rules and a
   * list of lines, but as violation nodes in the XML file are not sequential, this is somewhat
   * difficult.
   */
  private void buildXMLHashmap(NodeList fileNodes) {

    for (int i = 0; i < fileNodes.getLength(); i++) {

      ArrayList<ArrayList<Object>> violationsList = new ArrayList<>();
      String ruleType;

      Node fileNode = fileNodes.item(i);
      Element fileElement = (Element) fileNode;
      String pathName = fileElement.getAttribute("name");
      // Strip the full path from the file, just want the name
      String fileName = StringUtils
          .substringAfterLast(pathName, "\\"); // FIXME: just a note, does this also work on linux?

      NodeList violationNodes = fileElement.getElementsByTagName("violation");

      for (int j = 0; j < violationNodes.getLength(); j++) {

        ArrayList<Object> violation = new ArrayList<>();
        Node violationNode = violationNodes.item(j);
        Element violationElement = (Element) violationNode;

        NamedNodeMap violationAttributes = violationElement.getAttributes();

        // Get the violation type and the line the violation was on, could get more attributes here if useful
        ruleType = violationAttributes.getNamedItem("rule").getNodeValue();
        Integer violationLine = Integer
            .valueOf(violationAttributes.getNamedItem("beginline").getNodeValue());

        violation.add(ruleType);
        violation.add(violationLine);

        violationsList.add(violation);

      }
      // Add the rule violated and the line to the hashmap
      violationsMap.put(fileName, violationsList);

    }


  }

}
